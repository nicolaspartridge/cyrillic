{"version":3,"sources":["components/Header.jsx","components/Question.jsx","components/ButtonPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Question","props","className","count","getRandomInt","max","Math","floor","random","ButtonPicker","alphabetSounds","_useState","useState","_useState2","Object","slicedToArray","setCount","_useState3","_useState4","score","setScore","totalCount","titles","correctAns","pos","i","populateTitles","checkAns","ans","console","log","components_Question","id","onClick","App","components_Header","components_ButtonPicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e0408ea.chunk.js","sourcesContent":["import React from 'react'\nimport '../styling/Header.css'\n\nconst Header = () => {\n    return(\n        <header>\n            <h3>Russian Cyrillic</h3>\n        </header>\n    );\n}\n\nexport default Header","import React, { useState } from 'react';\nimport '../styling/Question.css'\n\nconst Question = (props) => {\n    const uppercaseAlphabet = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш' ,'Щ' , 'Э', 'Ю', 'Я']\n\n    return(\n        <div className=\"question\">\n            <p>{uppercaseAlphabet[props.count]}</p>\n        </div>\n    );\n}\n\nexport default Question","import Input from './Input'\nimport Question from './Question'\nimport React, { useState } from 'react';\n\nimport '../styling/ButtonPicker.css'\n\nconst ButtonPicker = () => {\n\n    const uppercaseAlphabet = ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш' ,'Щ' , 'Э', 'Ю', 'Я']\n    const alphabetSounds = ['a', 'b', 'v', 'g', 'd', 'e', 'o', 'zh', 'z', 'i', 'y', 'k', 'l', 'm', 'n', 'or', 'p', 'r', 's', 't', 'oo', 'f', 'h', 'ts', 'ch', 'sh', 'shsh', 'eh', 'oo', 'a']\n    const [count, setCount] = useState(0);\n    const  [score, setScore] = useState(0)\n    const totalCount = 30\n    let titles = [0, 0, 0, 0]\n\n    function populateTitles() {\n\n        let pos = getRandomInt(4)\n        \n        for (let i = 0; i < 4; i++){\n            if (i != pos) {\n                titles[i] = getRandomInt(totalCount - 1)\n            }\n        }\n    \n        titles[pos] = count\n\n        return pos\n    }\n\n    let correctAns = populateTitles()\n\n\n    function checkAns(ans) {\n        if(ans == correctAns) {\n            setScore(score + 1)\n            console.log(\"Correct \" + score )\n        }\n    }\n\n\n    if(count < totalCount){\n        return(\n            <div className=\"buttonPicker\">\n    \n                <Question count={count} />\n                <div className=\"buttons\">\n                    <button id=\"0\" onClick={() => {setCount(count + 1); checkAns(0)}}>{alphabetSounds[titles[0]]}</button>\n                    <button id=\"1\" onClick={() => {setCount(count + 1); checkAns(1)}}>{alphabetSounds[titles[1]]}</button>\n                    <button id=\"2\" onClick={() => {setCount(count + 1); checkAns(2)}}>{alphabetSounds[titles[2]]}</button>\n                    <button id=\"3\" onClick={() => {setCount(count + 1); checkAns(3)}}>{alphabetSounds[titles[3]]}</button>\n                </div>\n\n                <div className='score'>\n                    <h2>Score: {score}</h2>\n                </div>\n            </div>\n        );\n    } else {\n        return(\n        <div>\n            <div className=\"buttons\">\n                <button onClick={() => {setCount(0); setScore(0)}}>Play Again!</button>\n            </div>\n\n            <div className='score'>\n                    <h2>Score: {score}</h2>\n            </div>\n        </div>\n        \n        );\n    }\n    \n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n\nexport default ButtonPicker","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header'\nimport ButtonPicker from './components/ButtonPicker'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <ButtonPicker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}